/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core, connectionPluginCore } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    analyticsConnection<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName> & { totalCount: connectionPluginCore.ConnectionFieldResolver<TypeName, FieldName, "totalCount">, avgDuration: connectionPluginCore.ConnectionFieldResolver<TypeName, FieldName, "avgDuration"> }
    ): void
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Comment: { // root type
    authorEmail?: string | null; // String
    content?: string | null; // String
    createAt?: string | null; // String
    id?: number | null; // Int
    postId?: number | null; // Int
  }
  Edge: { // root type
    likeCount?: number | null; // Int
    node?: NexusGenRootTypes['Post'] | null; // Post
  }
  Like: { // root type
    authorEmail?: string | null; // String
    id?: number | null; // Int
    postId?: number | null; // Int
  }
  Mutation: {};
  Notice: { // root type
    content?: string | null; // String
    createdAt?: string | null; // String
    id?: number | null; // Int
  }
  PageInfo: { // root type
    hasNextPage?: boolean | null; // Boolean
    totalPageCount?: number | null; // Int
  }
  Post: { // root type
    category?: string | null; // String
    content?: string | null; // String
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id?: number | null; // Int
    subCategory?: string | null; // String
    title?: string | null; // String
    views?: number | null; // Int
  }
  Query: {};
  Response: { // root type
    edges?: Array<NexusGenRootTypes['Edge'] | null> | null; // [Edge]
    pageInfo?: NexusGenRootTypes['PageInfo'] | null; // PageInfo
  }
  User: { // root type
    email?: string | null; // String
    id?: string | null; // String
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Comment: { // field return type
    authorEmail: string | null; // String
    content: string | null; // String
    createAt: string | null; // String
    id: number | null; // Int
    post: NexusGenRootTypes['Post'] | null; // Post
    postId: number | null; // Int
  }
  Edge: { // field return type
    likeCount: number | null; // Int
    node: NexusGenRootTypes['Post'] | null; // Post
  }
  Like: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    authorEmail: string | null; // String
    id: number | null; // Int
    post: NexusGenRootTypes['Post'] | null; // Post
    postId: number | null; // Int
  }
  Mutation: { // field return type
    createComment: NexusGenRootTypes['Comment'] | null; // Comment
    createLike: NexusGenRootTypes['Like'] | null; // Like
    createPost: NexusGenRootTypes['Post'] | null; // Post
    deleteComment: NexusGenRootTypes['Comment'] | null; // Comment
    deleteLike: NexusGenRootTypes['Like'] | null; // Like
    deletePost: NexusGenRootTypes['Post'] | null; // Post
    incrementViews: NexusGenRootTypes['Post'] | null; // Post
    updatePost: NexusGenRootTypes['Post'] | null; // Post
  }
  Notice: { // field return type
    content: string | null; // String
    createdAt: string | null; // String
    id: number | null; // Int
  }
  PageInfo: { // field return type
    hasNextPage: boolean | null; // Boolean
    totalPageCount: number | null; // Int
  }
  Post: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    category: string | null; // String
    comments: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    content: string | null; // String
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: number | null; // Int
    likes: Array<NexusGenRootTypes['Like'] | null> | null; // [Like]
    subCategory: string | null; // String
    title: string | null; // String
    views: number | null; // Int
  }
  Query: { // field return type
    comment: NexusGenRootTypes['Comment'] | null; // Comment
    filterCategory: NexusGenRootTypes['Response'] | null; // Response
    filterPostingCategory: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    filterPosts: NexusGenRootTypes['Response'] | null; // Response
    filterUser: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    findAll: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    notice: NexusGenRootTypes['Notice'] | null; // Notice
    post: NexusGenRootTypes['Post'] | null; // Post
    posts: NexusGenRootTypes['Response'] | null; // Response
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  Response: { // field return type
    edges: Array<NexusGenRootTypes['Edge'] | null> | null; // [Edge]
    pageInfo: NexusGenRootTypes['PageInfo'] | null; // PageInfo
  }
  User: { // field return type
    email: string | null; // String
    id: string | null; // String
    name: string | null; // String
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
  }
}

export interface NexusGenFieldTypeNames {
  Comment: { // field return type name
    authorEmail: 'String'
    content: 'String'
    createAt: 'String'
    id: 'Int'
    post: 'Post'
    postId: 'Int'
  }
  Edge: { // field return type name
    likeCount: 'Int'
    node: 'Post'
  }
  Like: { // field return type name
    author: 'User'
    authorEmail: 'String'
    id: 'Int'
    post: 'Post'
    postId: 'Int'
  }
  Mutation: { // field return type name
    createComment: 'Comment'
    createLike: 'Like'
    createPost: 'Post'
    deleteComment: 'Comment'
    deleteLike: 'Like'
    deletePost: 'Post'
    incrementViews: 'Post'
    updatePost: 'Post'
  }
  Notice: { // field return type name
    content: 'String'
    createdAt: 'String'
    id: 'Int'
  }
  PageInfo: { // field return type name
    hasNextPage: 'Boolean'
    totalPageCount: 'Int'
  }
  Post: { // field return type name
    author: 'User'
    category: 'String'
    comments: 'Comment'
    content: 'String'
    createdAt: 'DateTime'
    id: 'Int'
    likes: 'Like'
    subCategory: 'String'
    title: 'String'
    views: 'Int'
  }
  Query: { // field return type name
    comment: 'Comment'
    filterCategory: 'Response'
    filterPostingCategory: 'Post'
    filterPosts: 'Response'
    filterUser: 'User'
    findAll: 'Post'
    notice: 'Notice'
    post: 'Post'
    posts: 'Response'
    users: 'User'
  }
  Response: { // field return type name
    edges: 'Edge'
    pageInfo: 'PageInfo'
  }
  User: { // field return type name
    email: 'String'
    id: 'String'
    name: 'String'
    posts: 'Post'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createComment: { // args
      authorEmail: string; // String!
      content: string; // String!
      postId: number; // Int!
    }
    createLike: { // args
      authorEmail: string; // String!
      postId: number; // Int!
    }
    createPost: { // args
      authorEmail: string; // String!
      category: string; // String!
      content: string; // String!
      subCategory: string; // String!
      title: string; // String!
    }
    deleteComment: { // args
      commentId: number; // Int!
    }
    deleteLike: { // args
      authorEmail: string; // String!
      postId: number; // Int!
    }
    deletePost: { // args
      postId: number; // Int!
    }
    incrementViews: { // args
      postId: number; // Int!
    }
    updatePost: { // args
      content: string; // String!
      postId: number; // Int!
    }
  }
  Query: {
    comment: { // args
      commentId: number; // Int!
    }
    filterCategory: { // args
      mainCategory: string; // String!
      pageNumber: number; // Int!
      searchCategory: string; // String!
    }
    filterPostingCategory: { // args
      queryPath: string; // String!
    }
    filterPosts: { // args
      pageNumber: number; // Int!
      searchString: string; // String!
    }
    filterUser: { // args
      name: string; // String!
    }
    findAll: { // args
      searchWord: string; // String!
    }
    post: { // args
      postId: number; // Int!
    }
    posts: { // args
      pageNumber: number; // Int!
      sorting?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}